#!/bin/bash
set -eo pipefail
source $(dirname $0)/config/paths.sh

mkdir -p $app_dir
mkdir -p $env_dir
mkdir -p $cache_root
mkdir -p $buildpack_root
mkdir -p $build_root/.profile.d

user_id=$((RANDOM+1000))
user_name="u${user_id}"

# Create a random user
/usr/sbin/addgroup --quiet --gid $user_id $user_name
/usr/sbin/adduser --shell /bin/bash \
                  --disabled-password \
                  --force-badname \
                  --no-create-home \
                  --uid $user_id \
                  --gid $user_id \
                  --gecos '' \
                  --quiet \
                  --home $app_dir \
                  $user_name

# Grant the user access to all required paths before
# running the compile phase as non-privileged user.
chgrp $user_name /dev
chown $user_name:$user_name /dev/shm /tmp /var/tmp
chown -R $user_name:$user_name  $app_dir \
                                $env_dir \
                                $cache_root \
                                $buildpack_root \
                                $build_root

# Compile the slug
/usr/bin/setuidgid $user_name /build/compile.sh

## Generate start commands
cat > /start <<EOF
#!/bin/bash
export HOME=$app_dir
chown -R $user_name:$user_name $app_dir
cd $app_dir

for file in .profile.d/*.sh; do
  source \$file
done
hash -r

if [[ -f Procfile ]]; then
  command="\$(ruby -e "require 'yaml';puts YAML.load_file('Procfile')['\$1']")"
else
  command="\$(ruby -e "require 'yaml';puts (YAML.load_file('.release')['default_process_types'] || {})['\$1']")"
fi

setuidgid $user_name \$(eval echo \${command})
EOF

cat > /exec <<EOF
#!/bin/bash
export HOME=$app_dir
chown -R $user_name:$user_name $app_dir
cd $app_dir

for file in .profile.d/*.sh; do
  source \$file
done
hash -r
command="\$@"
setuidgid $user_name \$(eval echo \${command})
EOF

chmod +x /start
chmod +x /exec
rm -rf $app_dir
mv $build_root $app_dir

# Clean up
rm -rf /build/
rm -rf /tmp/*
